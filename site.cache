[{'category': '', 'index': False, 'subpages': [], 'target': u'article.html', 'title': 'My Article', 'url': u'article.html', 'checksum': '\xac\x94j\xbc\xcd\xf8"\xdf\x85\x8cPQ\x86g\xf3\xc8', 'rel_site_url': '.', 'excerpt': u'This is my Article in markdown I will talk about the following things Code Fragment A code fragment A sub-heading More words A Code Fragment Hello World A Photo a photo A Video a video Link to youtube', 'modified': 1393199218.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/article.md', 'content': u'<h1>This is my Article in markdown</h1>\n<p>I will talk about the following things</p>\n<h2>Code Fragment</h2>\n<p>A code fragment <a href="#fig-code-fragment"></a></p>\n<h3>A sub-heading</h3>\n<p>More words</p>\n<div id="fig-code-fragment"> A Code Fragment <pre>Hello World</pre></div>\n\n<h2>A Photo</h2>\n<p>a photo <a href="#fig-photo"></a></p>\n<div id=\'fig-photo\'><img src=\'photo.jpg\'></div>\n\n<h2>A Video</h2>\n<p>a video <a href="#fig-youtube"></a>\n<div id=\'fig-youtube\'>Link to youtube<br><br>\n  <iframe width="560" height="315" src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div></p>', 'sort_key': None, 'max_subpages': None, 'template': 'clown.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'article'}, {'category': '', 'index': False, 'subpages': [], 'target': 'index.html', 'title': 'supplescroll documentation', 'url': u'readme.html', 'checksum': '\x830a\xf9\x98\x02\xdd\xaf\x9f4D\x94\x0e=C\xa3', 'rel_site_url': '.', 'excerpt': u"SUPPLESCROLL scrolling articles to your heart's delight Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling. It turns this documentation in markdown into this interactive webpage. Features: table of contents generated from headers figure list generated from &lt;div&gt;s back links of ...", 'modified': 1393202401.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/readme.md', 'content': u'<h1>SUPPLESCROLL</h1>\n<p><em>scrolling articles to your heart\'s delight</em></p>\n<blockquote>\n<p>Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling.</p>\n</blockquote>\n<p>It turns this documentation in <a href="https://github.com/boscoh/supplescroll/blob/master/readme.md">markdown</a> into this <a href="http://boscoh.github.com/supplescroll">interactive webpage</a>.</p>\n<p>Features:</p>\n<ul>\n<li>table of contents generated from headers</li>\n<li>figure list generated from <code>&lt;div&gt;</code>s</li>\n<li>back links of figures to references in text</li>\n<li>smooth scrolling</li>\n<li>table of contents aware of text position</li>\n<li>the URL hashes respond to the text</li>\n</ul>\n<p>iOS-aware responsive-web themes:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, download from github:</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="https://github.com/boscoh/supplescroll/archive/master.zip">zip-package</a></p>\n<p>Then you should install <a href="http://boscoh.github.io/embellish">embellish</a>, which includes a coffeescript and sass compiler. </p>\n<p>Then edit the file <code>article.md</code> in markdown, following the guide below.</p>\n<p>When you\'re done, run:</p>\n<div class="codehilite"><pre>&gt; embellish .\n</pre></div>\n\n\n<p>And open <code>article.html</code>.</p>\n<h2>Source Code</h2>\n<p>You can browse the code at</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="http://github.com/boscoh/supplescroll">http://github.com/boscoh/supplescroll</a></p>\n<p>Please, fork and pull-request. </p>\n<p>New themes particularly welcome!</p>\n<p>Supplescroll was inspired by Ariel Flesier\'s <a href="http://plugins.jquery.com/project/ScrollTo">jquery.ScrollTo</a> library.</p>\n<h2>Write Article with Embellish</h2>\n<p>The easiest way to use supplescroll is to compile your article with the static website generator <a href="http://boscoh.github.com/embellish">embellish</a>.</p>\n<p>To write the article, use the YAML/markdown format, for example in <a href="#fig-markdown"></a>.</p>\n<div id="fig-markdown"> <code>article.md</code> - example of an article in supplescroll\n<pre>\ntemplate: lucid.haml\ntitle: My Article\n---\n\n---\n# This is my Article in markdown\n\nI will talk about the following things\n\n## Code Fragment\nA code fragment [](#fig-code-fragment)\n&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n\n## A Photo\na photo [](#fig-photo)\n&lt;div id=\'fig-photo\'&gt;\n  &lt;img src=\'photo.jpg\'&gt;\n&lt;/div&gt;\n\n## A Video\na video [](#fig-youtube)\n&lt;div id=\'fig-youtube\'&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;</pre>\n</div>\n\n<p>The format consists of a: </p>\n<ol>\n<li>header in <a href="http://www.keleshev.com/yaml-quick-intoduction">YAML</a></li>\n<li>an excerpt</li>\n<li>body in <a href="https://daringfireball.net/projects/markdown/basics">markdown</a></li>\n</ol>\n<p>In the header, give the name of a supplescroll template you want to use:</p>\n<div class="codehilite"><pre>template: lucid.haml\n</pre></div>\n\n\n<p>There are several templates provided in the package:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<p>For embellish to work, two lines of: <code>---</code> are needed to separate the header and excerpt from the main body. Whilst the excerpt is optional, to avoid potential bugs with <code>---</code> later in the text, I\'d suggest:</p>\n<div class="codehilite"><pre>template: lucid.haml\n---\n---\n</pre></div>\n\n\n<h3>Headers</h3>\n<p>Write the text in markdown, making sure to use proper markdown headers, which will be used to construct the table of contents:</p>\n<div class="codehilite"><pre># A Header\n## A Secondary Header\n</pre></div>\n\n\n<h3>Figures</h3>\n<p>To create a figure, you must escape markdown with a <code>&lt;div&gt;</code> tag, and give the <code>&lt;div&gt;</code> an appropriate <code>id</code>:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-code&#39;&gt;\n&lt;code&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/code&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>Note: if you want to display HTML-code, make sure you escape special HTML characters (<code>&lt;</code>, <code>&amp;</code>) properly. Use an <a href="http://www.freeformatter.com/html-escape.html">HTML-escape sanitizer</a>.</p>\n<h3>Images</h3>\n<p>You\'d probably want to insert a photo:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-photo&#39;&gt;\n  &lt;img src=&#39;photo.jpg&#39;&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-photo"></a>.</p>\n<div id=\'fig-photo\'> A sample photo\n  <img src=\'photo.jpg\'>\n</div>\n\n<h3>Youtube Videos</h3>\n<p>Or how about a youtube video:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-youtube&#39;&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-youtube"></a>.</p>\n<div id=\'fig-youtube\'>\n  Link to youtube\n  <br><br>\n  <iframe src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div>\n\n<h3>Figure links</h3>\n<p>In the main text, links to figures are identified as relative links to <code>#fig*</code>:</p>\n<div class="codehilite"><pre>I will talk about a code fragment [](#fig-code-fragment).\n</pre></div>\n\n\n<p>These will be properly formatted, and linked to the relevant figure.</p>\n<h3>Compile to HTML</h3>\n<p>You then compile the page with: </p>\n<div class="codehilite"><pre> &gt; embellish .\n</pre></div>\n\n\n<p>Which makes <code>article.html</code>. The function webpage, which uses the lucid theme, consists of the files:</p>\n<ul>\n<li><code>article.html</code></li>\n<li><code>jquery-2.0.3.js</code></li>\n<li><code>jquery.scrollTo.js</code></li>\n<li><code>supplescroll.js</code></li>\n<li><code>supplescroll.css</code></li>\n<li><code>page.js</code></li>\n<li><code>lucid.css</code></li>\n</ul>\n<h2>Write Article directly in HTML</h2>\n<p>Of course, you don\'t have to use embellish to build your HTML file, you can write it yourself. To use the lucid theme, you\'d make an HTML file like <code>article.html</code> <a href="#fig-html"></a>.</p>\n<p>This shows all the necessary declarations, style-sheets &amp; javascript modules.</p>\n<div id=\'fig-html\'> <code>article.html</code> - key ingredients of an HTML article page that works with the lucid theme.\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;meta content=\'initial-scale=1.0\' name=\'viewport\' /&gt;\n  &lt;link href=\'supplescroll.css\' rel=\'stylesheet\' /&gt;\n  &lt;link href=\'lucid.css\' rel=\'stylesheet\' /&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\'sidebar touchscroll\'&gt;&lt;/div&gt;\n  &lt;div class=\'text touchscroll\'&gt;\n    &lt;div class=\'relative_position\'&gt;\n\n       &lt;!-- YOUR TEXT GOES HERE! --&gt;\n       &lt;h1&gt; This is My Article Header &lt;/h1&gt;\n\n       &lt;p&gt;I will talk about a code fragment\n       &lt;a href=&quot;#fig-code-fragment&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n      &lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n        &lt;pre&gt;Hello World&lt;/pre&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\'figures touchscroll\'&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\'jquery-2.0.3.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'jquery.scrollTo.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'supplescroll.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'page.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n</pre>\n</div>\n\n<p>The text of course will be written using HTML markup, with <code>&lt;p&gt;</code> tags and <code>&lt;i&gt;</code> tags and such impediments to writing.</p>\n<p>As above, header tags <code>&lt;h1&gt;</code>\'s etc., will be used to build the table of contents:</p>\n<div class="codehilite"><pre>&lt;h1&gt; This is My Article Header &lt;/h1&gt;\n</pre></div>\n\n\n<p>Any <code>&lt;div&gt;</code>s with <code>id="fig*"</code> will be copied into the figure list.</p>\n<div class="codehilite"><pre>&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>This is essentially what is generated with <code>embellish</code> in the section above.</p>\n<h2>Theme it Yourself</h2>\n<p>If you are familiar with the holy triumvirate of HTML/CSS/javascript, you might want to theme your own templates. To do this, you\'ll have to understand the internals of supplescroll so that all the HTML elements can happily work together. </p>\n<p>Note: the supplescroll modules are actually written in coffeescript, then compiled to javascript.</p>\n<p>Below, we\'ll discuss how supplescroll works with respect to the <code>lucid.haml</code> theme.</p>\n<h3>Page Loader</h3>\n<p>Your page needs to initialize supplescroll with javascript. In the package, <code>page.js</code> provides the entry point. Since jquery is included we can use jquery to register our <code>init</code> function.</p>\n<div class="codehilite"><pre>$(window).ready(init)\n</pre></div>\n\n\n<div id="fig-init"> <code>init</code> - page intialization function in coffeescript\n<pre>\ninit = () ->\n  text = $(text_href)\n  toc = $(toc_href)\n  figlist = $(figlist_href)\n  text_width = supplescroll.get_outer_width(text)\n\n  supplescroll.init_touchscroll()\n  supplescroll.build_page(toc_href, text_href, figlist_href)\n\n  $(window).resize(resize_window)\n  resize_window()\n</pre>\n</div>\n\n<p>The <code>init</code> function <a href="#fig-init"></a>:</p>\n<ol>\n<li>declares page variables</li>\n<li>calls the page builder </li>\n<li>registers the resize function</li>\n<li>calls the touchscroll initializer</li>\n</ol>\n<h3>Page Builder</h3>\n<p>The page builder is in the module <code>supplescroll.js</code>, which obviously, must be loaded first via the <code>&lt;script&gt;</code> tag in the HTML file. The function to build the page is:</p>\n<div class="codehilite"><pre>supplescroll.build_page(toc_href, text_href, figlist_href)\n</pre></div>\n\n\n<p>The three parameters are hrefs referring to an element in the DOM of the HTML page. If <code>toc_href</code> is empty string, the table of contents will not be built. Similarly for <code>figlist_href</code>.</p>\n<p>The table of contents is built from the header elements (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc.) in the <code>text_href</code> and inserted into the element referred to by <code>toc_href</code>.</p>\n<p>The text is then scanned for figures, which are identified as <code>&lt;div&gt;</code>\'s that have id\'s in the form <code>fig*</code>. These <code>&lt;div&gt;</code>\'s are then copied in the figure list. The original <code>&lt;div&gt;</code>\'s are hidden, but can be displayed by CSS class changes.</p>\n<p>It\'s important to ensure that each figure <code>&lt;div&gt;</code>s has a unique id.</p>\n<p>Then the text is scanned for <code>&lt;a&gt;</code> links that point to internal href\'s in the form <code>#fig*</code>. These links are linked to the corresponding figures in the figure list.</p>\n<p>The figure <code>&lt;div&gt;</code> id\'s are renamed consecutively from <code>(figure 1)</code> onwards.</p>\n<p>Finally, the location url is scannd and the initial header is assigned to the hash. </p>\n<h3>Smooth Scrolling with ScrollTo</h3>\n<p>One of the things that the page builder does is to put in custom callbacks for links, which use the jquery.ScrollTo plugin to smoothly  scroll to the text or figure of interest.</p>\n<p>However, for that to work, the <code>&lt;div&gt;</code> container must be sized properly. That is the explicit size of the <code>&lt;div&gt;</code> must be smaller than the onscreen window and have the CSS attribute</p>\n<div class="codehilite"><pre>overflow:auto\n</pre></div>\n\n\n<p>Furthermore, the page builder will add suffcient white-space to the end of these <code>&lt;div&gt;</code>s so that scrolling will always take the child element of interest to the top of the <code>&lt;div&gt;</code>.</p>\n<h3>Scrolling Callback</h3>\n<p>The supplescroll module overrides the <code>scroll</code> callback function in the main text element in order to detect which headers and figures are currently onscreen. On scrolling, the main text will scan for the first figure link, and if a new one pops up, will scroll the figure list to the that figure.</p>\n<p>For the <code>scroll</code> callback to work, it is <strong>imperative</strong> that the main text element has the CSS style:</p>\n<div class="codehilite"><pre>position:relative\n</pre></div>\n\n\n<p>Otherwise, the positions of elements in the main text cannot be calculated correctly.</p>\n<p>To do this, wrap the main-text in the HTML with the utility class <code>.relative_position</code></p>\n<h3>Overriding the resize function</h3>\n<p>The themes in supplescroll use custom resize functions to resize columns. This is optional, as you could do resizing through CSS.</p>\n<p>As a responsible web developer, you might ask, why would you override CSS for resizing?</p>\n<p>Well, I wanted multiple columns that spanned the whole page, where some columns had fixed widths, and others would expand to fill the remaining space. As well, I wanted the columns to fill the height of the page, but also to drop certain columns for mobile devices.</p>\n<p>Alas, you cannot do all that with CSS. </p>\n<p>So I wrote my own resize function. Here\'s a snippet for three-column resize <a href="#fig-resize-3"></a></p>\n<div id="fig-resize-3"> Code fragment showing three-column resize\n<pre>\ntoc.css(\'display\',\'block\')\nfiglist.css(\'display\',\'block\')\n\n# this function allows for some padding in the \n# body to be filter through the resize function\nbody_padding_left = parseInt($(document.body).css(\'padding-left\'))\nbody_padding_right = parseInt($(document.body).css(\'padding-right\'))\n\nsupplescroll.set_outer_width(text, text_width)\nsupplescroll.set_left(toc, body_padding_left)\n\nleft = supplescroll.get_right(toc)\nsupplescroll.set_left(text, left)\n\nleft = supplescroll.get_right(text)\nsupplescroll.set_left(figlist, left)\n\nfiglist_width = \\\n    window_width \\\n    - body_padding_left \\\n    - body_padding_right \\\n    - supplescroll.get_outer_width(toc) \\\n    - supplescroll.get_outer_width(text)\nsupplescroll.set_outer_width(figlist, figlist_width)\n</pre>\n</div>\n\n<p>First, we make sure <code>toc</code> (table of contents) and <code>figlist</code> (figure list) are switched on with <code>display:block</code>. To turn these off in 1-column display, these would be set to <code>display:none</code>.</p>\n<p>In three column mode, we want the main text to have a fixed width <code>text_width</code> for easy reading. </p>\n<p>One of the key to manually resizing is to fit the columns exactly onto the width of the window. This will prevent any bouncing effect of the page. This requires first that the CSS of the body and html to:</p>\n<div class="codehilite"><pre>body, html {\n  width: 100%;\n  height: 100%;\n  overflow: hidden\n}\n</pre></div>\n\n\n<p>Then, we need to set all the resizable elements to <code>position:absolute</code>, which will allow the following helper functions to work <a href="#fig-helper-fns"></a>.</p>\n<div id="fig-helper-fns">\n  <pre>\n# routines to get the absolute position of a jquery element\nsupplescroll.get_left\nsupplescroll.get_top\nsupplescroll.get_right\nsupplescroll.get_bottom\n\n# routines to set the absolute position of a jquery element\nsupplescroll.set_left\nsupplescroll.set_top\n\n# routines to get the dimensions of a jquery element\nsupplescroll.get_outer_width\nsupplescroll.get_outer_height\n\n# routines to set the dimensions of a jquery element\nsupplescroll.set_outer_width\nsupplescroll.set_outer_height\n  </pre>\n</div>\n\n<p>These helper functions can be used in combination with each other to get perfect placement in the resize function <a href="#fig-resize-3"></a>. For example, by getting the right edge of <code>toc</code> by <code>get_right</code>, and assigning this right edge to the left edge of <code>text</code> with <code>set_left</code>, we can place <code>toc</code> right next to <code>text</code>.</p>\n<p>We can also calculate exactly the <code>figlist_width</code> needed to fill the remaining space, and assign this to <code>figlist</code> via <code>set_outer_width</code>.</p>\n<p>Finally, the resize function looks for images in the <code>figlist</code> and resizes them to fit the column. If the column is big enough, then the image will be displayed at its natural dimensions. Simarly, youtube videos will be resized until it reaches a maximum size. A fixed aspect ratio is applied to all youtube videos.</p>\n<p>Note: Firefox sometimes screws up the sizes unless the <code>&lt;doctype&gt;</code> in the <code>&lt;head&gt;</code> is defined to html.</p>\n<h3>Touchscroll on IOS</h3>\n<p>Touch-based scrolling of webpages on iOS devices is really nice. However, the default scrolling in iOS does not work well with the <code>ScrollTo</code> library. To make it work properly, you need to do two things:</p>\n<ol>\n<li>add the class <code>.touchscroll</code> to scrollale elements</li>\n<li>initialize with <code>supplescroll.init_touchscroll()</code> </li>\n</ol>\n<p>The <code>.touchscroll</code> class enables inertia touch-based scrolling through the <code>-webkit-overflow-scrolling:touch</code> attribute, and sets <code>overflow:auto</code>. </p>\n<p><code>init_touchscroll()</code> shuts down inertial scrolling of all elements except the ones indicated by <code>.touchscroll</code>. As well, it adds a hack to avoid an unwanted default behavior of iOS. Normally, if an element has been scrolled to the edge of its scrolling area, this will trigger the inertial scrolling of its parent, and so on up, until the whole page scrolls. To avoid this <code>init_touchscroll()</code> overrides the <code>touch</code> callback with a function that prevents any <code>.touchscroll</code> element from reaching its edge.</p>\n<h3>Overriding styles</h3>\n<p>All the selections are displayed through CSS class changes, with the <code>.active</code> class applied to the active header in the <code>#table-of-contents</code>, the active <code>.figlink</code> in the <code>#main-text</code>, and the active <code>.fig-in-list</code> in <code>#figure-list</code>. These classes can be overriden to apply the display of your choice.</p>\n<p>&copy; 2014, Bosco K. Ho.</p>', 'sort_key': None, 'max_subpages': None, 'template': 'dark.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'readme'}, {'category': '', 'index': False, 'subpages': [], 'target': u'sample2.html', 'title': 'supplescroll documentation', 'url': u'sample2.html', 'checksum': '\xc8\x1f:\xa7\xfdj\xb0G\xc9k\xbf4c\x86\x8d\xdf', 'rel_site_url': '.', 'excerpt': u"SUPPLESCROLL scrolling articles to your heart's delight Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling. It turns this documentation in markdown into this interactive webpage. Features: table of contents generated from headers figure list generated from &lt;div&gt;s back links of ...", 'modified': 1393202404.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/sample2.md', 'content': u'<h1>SUPPLESCROLL</h1>\n<p><em>scrolling articles to your heart\'s delight</em></p>\n<blockquote>\n<p>Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling.</p>\n</blockquote>\n<p>It turns this documentation in <a href="https://github.com/boscoh/supplescroll/blob/master/readme.md">markdown</a> into this <a href="http://boscoh.github.com/supplescroll">interactive webpage</a>.</p>\n<p>Features:</p>\n<ul>\n<li>table of contents generated from headers</li>\n<li>figure list generated from <code>&lt;div&gt;</code>s</li>\n<li>back links of figures to references in text</li>\n<li>smooth scrolling</li>\n<li>table of contents aware of text position</li>\n<li>the URL hashes respond to the text</li>\n</ul>\n<p>iOS-aware responsive-web themes:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, download from github:</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="https://github.com/boscoh/supplescroll/archive/master.zip">zip-package</a></p>\n<p>Then you should install <a href="http://boscoh.github.io/embellish">embellish</a>, which includes a coffeescript and sass compiler. </p>\n<p>Then edit the file <code>article.md</code> in markdown, following the guide below.</p>\n<p>When you\'re done, run:</p>\n<div class="codehilite"><pre>&gt; embellish .\n</pre></div>\n\n\n<p>And open <code>article.html</code>.</p>\n<h2>Source Code</h2>\n<p>You can browse the code at</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="http://github.com/boscoh/supplescroll">http://github.com/boscoh/supplescroll</a></p>\n<p>Please, fork and pull-request. </p>\n<p>New themes particularly welcome!</p>\n<p>Supplescroll was inspired by Ariel Flesier\'s <a href="http://plugins.jquery.com/project/ScrollTo">jquery.ScrollTo</a> library.</p>\n<h2>Write Article with Embellish</h2>\n<p>The easiest way to use supplescroll is to compile your article with the static website generator <a href="http://boscoh.github.com/embellish">embellish</a>.</p>\n<p>To write the article, use the YAML/markdown format, for example in <a href="#fig-markdown"></a>.</p>\n<div id="fig-markdown"> <code>article.md</code> - example of an article in supplescroll\n<pre>\ntemplate: light.haml\ntitle: My Article\n---\n\n---\n# This is my Article in markdown\n\nI will talk about the following things\n\n## Code Fragment\nA code fragment [](#fig-code-fragment)\n&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n\n## A Photo\na photo [](#fig-photo)\n&lt;div id=\'fig-photo\'&gt;\n  &lt;img src=\'photo.jpg\'&gt;\n&lt;/div&gt;\n\n## A Video\na video [](#fig-youtube)\n&lt;div id=\'fig-youtube\'&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;</pre>\n</div>\n\n<p>The format consists of a: </p>\n<ol>\n<li>header in <a href="http://www.keleshev.com/yaml-quick-intoduction">YAML</a></li>\n<li>an excerpt</li>\n<li>body in <a href="https://daringfireball.net/projects/markdown/basics">markdown</a></li>\n</ol>\n<p>In the header, give the name of a supplescroll template you want to use:</p>\n<div class="codehilite"><pre>template: lucid.haml\n</pre></div>\n\n\n<p>There are several templates provided in the package:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<p>For embellish to work, two lines of: <code>---</code> are needed to separate the header and excerpt from the main body. Whilst the excerpt is optional, to avoid potential bugs with <code>---</code> later in the text, I\'d suggest:</p>\n<div class="codehilite"><pre>template: lucid.haml\n---\n---\n</pre></div>\n\n\n<h3>Headers</h3>\n<p>Write the text in markdown, making sure to use proper markdown headers, which will be used to construct the table of contents:</p>\n<div class="codehilite"><pre># A Header\n## A Secondary Header\n</pre></div>\n\n\n<h3>Figures</h3>\n<p>To create a figure, you must escape markdown with a <code>&lt;div&gt;</code> tag, and give the <code>&lt;div&gt;</code> an appropriate <code>id</code>:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-code&#39;&gt;\n&lt;code&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/code&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>Note: if you want to display HTML-code, make sure you escape special HTML characters (<code>&lt;</code>, <code>&amp;</code>) properly. Use an <a href="http://www.freeformatter.com/html-escape.html">HTML-escape sanitizer</a>.</p>\n<h3>Images</h3>\n<p>You\'d probably want to insert a photo:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-photo&#39;&gt;\n  &lt;img src=&#39;photo.jpg&#39;&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-photo"></a>.</p>\n<div id=\'fig-photo\'> A sample photo\n  <img src=\'photo.jpg\'>\n</div>\n\n<h3>Youtube Videos</h3>\n<p>Or how about a youtube video:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-youtube&#39;&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-youtube"></a>.</p>\n<div id=\'fig-youtube\'>\n  Link to youtube\n  <br><br>\n  <iframe src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div>\n\n<h3>Figure links</h3>\n<p>In the main text, links to figures are identified as relative links to <code>#fig*</code>:</p>\n<div class="codehilite"><pre>I will talk about a code fragment [](#fig-code-fragment).\n</pre></div>\n\n\n<p>These will be properly formatted, and linked to the relevant figure.</p>\n<h3>Compile to HTML</h3>\n<p>You then compile the page with: </p>\n<div class="codehilite"><pre> &gt; embellish .\n</pre></div>\n\n\n<p>Which makes <code>article.html</code>. The function webpage, which uses the lucid theme, consists of the files:</p>\n<ul>\n<li><code>article.html</code></li>\n<li><code>jquery-2.0.3.js</code></li>\n<li><code>jquery.scrollTo.js</code></li>\n<li><code>supplescroll.js</code></li>\n<li><code>supplescroll.css</code></li>\n<li><code>page.js</code></li>\n<li><code>lucid.css</code></li>\n</ul>\n<h2>Write Article directly in HTML</h2>\n<p>Of course, you don\'t have to use embellish to build your HTML file, you can write it yourself. To use the lucid theme, you\'d make an HTML file like <code>article.html</code> <a href="#fig-html"></a>.</p>\n<p>This shows all the necessary declarations, style-sheets &amp; javascript modules.</p>\n<div id=\'fig-html\'> <code>article.html</code> - key ingredients of an HTML article page that works with the lucid theme.\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;meta content=\'initial-scale=1.0\' name=\'viewport\' /&gt;\n  &lt;link href=\'supplescroll.css\' rel=\'stylesheet\' /&gt;\n  &lt;link href=\'lucid.css\' rel=\'stylesheet\' /&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\'sidebar touchscroll\'&gt;&lt;/div&gt;\n  &lt;div class=\'text touchscroll\'&gt;\n    &lt;div class=\'relative_position\'&gt;\n\n       &lt;!-- YOUR TEXT GOES HERE! --&gt;\n       &lt;h1&gt; This is My Article Header &lt;/h1&gt;\n\n       &lt;p&gt;I will talk about a code fragment\n       &lt;a href=&quot;#fig-code-fragment&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n      &lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n        &lt;pre&gt;Hello World&lt;/pre&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\'figures touchscroll\'&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\'jquery-2.0.3.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'jquery.scrollTo.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'supplescroll.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'page.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n</pre>\n</div>\n\n<p>The text of course will be written using HTML markup, with <code>&lt;p&gt;</code> tags and <code>&lt;i&gt;</code> tags and such impediments to writing.</p>\n<p>As above, header tags <code>&lt;h1&gt;</code>\'s etc., will be used to build the table of contents:</p>\n<div class="codehilite"><pre>&lt;h1&gt; This is My Article Header &lt;/h1&gt;\n</pre></div>\n\n\n<p>Any <code>&lt;div&gt;</code>s with <code>id="fig*"</code> will be copied into the figure list.</p>\n<div class="codehilite"><pre>&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>This is essentially what is generated with <code>embellish</code> in the section above.</p>\n<h2>Theme it Yourself</h2>\n<p>If you are familiar with the holy triumvirate of HTML/CSS/javascript, you might want to theme your own templates. To do this, you\'ll have to understand the internals of supplescroll so that all the HTML elements can happily work together. </p>\n<p>Note: the supplescroll modules are actually written in coffeescript, then compiled to javascript.</p>\n<p>Below, we\'ll discuss how supplescroll works with respect to the <code>lucid.haml</code> theme.</p>\n<h3>Page Loader</h3>\n<p>Your page needs to initialize supplescroll with javascript. In the package, <code>page.js</code> provides the entry point. Since jquery is included we can use jquery to register our <code>init</code> function.</p>\n<div class="codehilite"><pre>$(window).ready(init)\n</pre></div>\n\n\n<div id="fig-init"> <code>init</code> - page intialization function in coffeescript\n<pre>\ninit = () ->\n  text = $(text_href)\n  toc = $(toc_href)\n  figlist = $(figlist_href)\n  text_width = supplescroll.get_outer_width(text)\n\n  supplescroll.init_touchscroll()\n  supplescroll.build_page(toc_href, text_href, figlist_href)\n\n  $(window).resize(resize_window)\n  resize_window()\n</pre>\n</div>\n\n<p>The <code>init</code> function <a href="#fig-init"></a>:</p>\n<ol>\n<li>declares page variables</li>\n<li>calls the page builder </li>\n<li>registers the resize function</li>\n<li>calls the touchscroll initializer</li>\n</ol>\n<h3>Page Builder</h3>\n<p>The page builder is in the module <code>supplescroll.js</code>, which obviously, must be loaded first via the <code>&lt;script&gt;</code> tag in the HTML file. The function to build the page is:</p>\n<div class="codehilite"><pre>supplescroll.build_page(toc_href, text_href, figlist_href)\n</pre></div>\n\n\n<p>The three parameters are hrefs referring to an element in the DOM of the HTML page. If <code>toc_href</code> is empty string, the table of contents will not be built. Similarly for <code>figlist_href</code>.</p>\n<p>The table of contents is built from the header elements (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc.) in the <code>text_href</code> and inserted into the element referred to by <code>toc_href</code>.</p>\n<p>The text is then scanned for figures, which are identified as <code>&lt;div&gt;</code>\'s that have id\'s in the form <code>fig*</code>. These <code>&lt;div&gt;</code>\'s are then copied in the figure list. The original <code>&lt;div&gt;</code>\'s are hidden, but can be displayed by CSS class changes.</p>\n<p>It\'s important to ensure that each figure <code>&lt;div&gt;</code>s has a unique id.</p>\n<p>Then the text is scanned for <code>&lt;a&gt;</code> links that point to internal href\'s in the form <code>#fig*</code>. These links are linked to the corresponding figures in the figure list.</p>\n<p>The figure <code>&lt;div&gt;</code> id\'s are renamed consecutively from <code>(figure 1)</code> onwards.</p>\n<p>Finally, the location url is scannd and the initial header is assigned to the hash. </p>\n<h3>Smooth Scrolling with ScrollTo</h3>\n<p>One of the things that the page builder does is to put in custom callbacks for links, which use the jquery.ScrollTo plugin to smoothly  scroll to the text or figure of interest.</p>\n<p>However, for that to work, the <code>&lt;div&gt;</code> container must be sized properly. That is the explicit size of the <code>&lt;div&gt;</code> must be smaller than the onscreen window and have the CSS attribute</p>\n<div class="codehilite"><pre>overflow:auto\n</pre></div>\n\n\n<p>Furthermore, the page builder will add suffcient white-space to the end of these <code>&lt;div&gt;</code>s so that scrolling will always take the child element of interest to the top of the <code>&lt;div&gt;</code>.</p>\n<h3>Scrolling Callback</h3>\n<p>The supplescroll module overrides the <code>scroll</code> callback function in the main text element in order to detect which headers and figures are currently onscreen. On scrolling, the main text will scan for the first figure link, and if a new one pops up, will scroll the figure list to the that figure.</p>\n<p>For the <code>scroll</code> callback to work, it is <strong>imperative</strong> that the main text element has the CSS style:</p>\n<div class="codehilite"><pre>position:relative\n</pre></div>\n\n\n<p>Otherwise, the positions of elements in the main text cannot be calculated correctly.</p>\n<p>To do this, wrap the main-text in the HTML with the utility class <code>.relative_position</code></p>\n<h3>Overriding the resize function</h3>\n<p>The themes in supplescroll use custom resize functions to resize columns. This is optional, as you could do resizing through CSS.</p>\n<p>As a responsible web developer, you might ask, why would you override CSS for resizing?</p>\n<p>Well, I wanted multiple columns that spanned the whole page, where some columns had fixed widths, and others would expand to fill the remaining space. As well, I wanted the columns to fill the height of the page, but also to drop certain columns for mobile devices.</p>\n<p>Alas, you cannot do all that with CSS. </p>\n<p>So I wrote my own resize function. Here\'s a snippet for three-column resize <a href="#fig-resize-3"></a></p>\n<div id="fig-resize-3"> Code fragment showing three-column resize\n<pre>\ntoc.css(\'display\',\'block\')\nfiglist.css(\'display\',\'block\')\n\n# this function allows for some padding in the \n# body to be filter through the resize function\nbody_padding_left = parseInt($(document.body).css(\'padding-left\'))\nbody_padding_right = parseInt($(document.body).css(\'padding-right\'))\n\nsupplescroll.set_outer_width(text, text_width)\nsupplescroll.set_left(toc, body_padding_left)\n\nleft = supplescroll.get_right(toc)\nsupplescroll.set_left(text, left)\n\nleft = supplescroll.get_right(text)\nsupplescroll.set_left(figlist, left)\n\nfiglist_width = \\\n    window_width \\\n    - body_padding_left \\\n    - body_padding_right \\\n    - supplescroll.get_outer_width(toc) \\\n    - supplescroll.get_outer_width(text)\nsupplescroll.set_outer_width(figlist, figlist_width)\n</pre>\n</div>\n\n<p>First, we make sure <code>toc</code> (table of contents) and <code>figlist</code> (figure list) are switched on with <code>display:block</code>. To turn these off in 1-column display, these would be set to <code>display:none</code>.</p>\n<p>In three column mode, we want the main text to have a fixed width <code>text_width</code> for easy reading. </p>\n<p>One of the key to manually resizing is to fit the columns exactly onto the width of the window. This will prevent any bouncing effect of the page. This requires first that the CSS of the body and html to:</p>\n<div class="codehilite"><pre>body, html {\n  width: 100%;\n  height: 100%;\n  overflow: hidden\n}\n</pre></div>\n\n\n<p>Then, we need to set all the resizable elements to <code>position:absolute</code>, which will allow the following helper functions to work <a href="#fig-helper-fns"></a>.</p>\n<div id="fig-helper-fns">\n  <pre>\n# routines to get the absolute position of a jquery element\nsupplescroll.get_left\nsupplescroll.get_top\nsupplescroll.get_right\nsupplescroll.get_bottom\n\n# routines to set the absolute position of a jquery element\nsupplescroll.set_left\nsupplescroll.set_top\n\n# routines to get the dimensions of a jquery element\nsupplescroll.get_outer_width\nsupplescroll.get_outer_height\n\n# routines to set the dimensions of a jquery element\nsupplescroll.set_outer_width\nsupplescroll.set_outer_height\n  </pre>\n</div>\n\n<p>These helper functions can be used in combination with each other to get perfect placement in the resize function <a href="#fig-resize-3"></a>. For example, by getting the right edge of <code>toc</code> by <code>get_right</code>, and assigning this right edge to the left edge of <code>text</code> with <code>set_left</code>, we can place <code>toc</code> right next to <code>text</code>.</p>\n<p>We can also calculate exactly the <code>figlist_width</code> needed to fill the remaining space, and assign this to <code>figlist</code> via <code>set_outer_width</code>.</p>\n<p>Finally, the resize function looks for images in the <code>figlist</code> and resizes them to fit the column. If the column is big enough, then the image will be displayed at its natural dimensions. Simarly, youtube videos will be resized until it reaches a maximum size. A fixed aspect ratio is applied to all youtube videos.</p>\n<p>Note: Firefox sometimes screws up the sizes unless the <code>&lt;doctype&gt;</code> in the <code>&lt;head&gt;</code> is defined to html.</p>\n<h3>Touchscroll on IOS</h3>\n<p>Touch-based scrolling of webpages on iOS devices is really nice. However, the default scrolling in iOS does not work well with the <code>ScrollTo</code> library. To make it work properly, you need to do two things:</p>\n<ol>\n<li>add the class <code>.touchscroll</code> to scrollale elements</li>\n<li>initialize with <code>supplescroll.init_touchscroll()</code> </li>\n</ol>\n<p>The <code>.touchscroll</code> class enables inertia touch-based scrolling through the <code>-webkit-overflow-scrolling:touch</code> attribute, and sets <code>overflow:auto</code>. </p>\n<p><code>init_touchscroll()</code> shuts down inertial scrolling of all elements except the ones indicated by <code>.touchscroll</code>. As well, it adds a hack to avoid an unwanted default behavior of iOS. Normally, if an element has been scrolled to the edge of its scrolling area, this will trigger the inertial scrolling of its parent, and so on up, until the whole page scrolls. To avoid this <code>init_touchscroll()</code> overrides the <code>touch</code> callback with a function that prevents any <code>.touchscroll</code> element from reaching its edge.</p>\n<h3>Overriding styles</h3>\n<p>All the selections are displayed through CSS class changes, with the <code>.active</code> class applied to the active header in the <code>#table-of-contents</code>, the active <code>.figlink</code> in the <code>#main-text</code>, and the active <code>.fig-in-list</code> in <code>#figure-list</code>. These classes can be overriden to apply the display of your choice.</p>\n<p>&copy; 2014, Bosco K. Ho.</p>', 'sort_key': None, 'max_subpages': None, 'template': 'light.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'sample2'}, {'category': '', 'index': False, 'subpages': [], 'target': u'sample3.html', 'title': 'supplescroll documentation', 'url': u'sample3.html', 'checksum': '\xb0\x1e ,9s\x84Br\xa2\x8e\x90\n2\x9ft', 'rel_site_url': '.', 'excerpt': u"SUPPLESCROLL scrolling articles to your heart's delight Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling. It turns this documentation in markdown into this interactive webpage. Features: table of contents generated from headers figure list generated from &lt;div&gt;s back links of ...", 'modified': 1393202404.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/sample3.md', 'content': u'<h1>SUPPLESCROLL</h1>\n<p><em>scrolling articles to your heart\'s delight</em></p>\n<blockquote>\n<p>Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling.</p>\n</blockquote>\n<p>It turns this documentation in <a href="https://github.com/boscoh/supplescroll/blob/master/readme.md">markdown</a> into this <a href="http://boscoh.github.com/supplescroll">interactive webpage</a>.</p>\n<p>Features:</p>\n<ul>\n<li>table of contents generated from headers</li>\n<li>figure list generated from <code>&lt;div&gt;</code>s</li>\n<li>back links of figures to references in text</li>\n<li>smooth scrolling</li>\n<li>table of contents aware of text position</li>\n<li>the URL hashes respond to the text</li>\n</ul>\n<p>iOS-aware responsive-web themes:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, download from github:</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="https://github.com/boscoh/supplescroll/archive/master.zip">zip-package</a></p>\n<p>Then you should install <a href="http://boscoh.github.io/embellish">embellish</a>, which includes a coffeescript and sass compiler. </p>\n<p>Then edit the file <code>article.md</code> in markdown, following the guide below.</p>\n<p>When you\'re done, run:</p>\n<div class="codehilite"><pre>&gt; embellish .\n</pre></div>\n\n\n<p>And open <code>article.html</code>.</p>\n<h2>Source Code</h2>\n<p>You can browse the code at</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="http://github.com/boscoh/supplescroll">http://github.com/boscoh/supplescroll</a></p>\n<p>Please, fork and pull-request. </p>\n<p>New themes particularly welcome!</p>\n<p>Supplescroll was inspired by Ariel Flesier\'s <a href="http://plugins.jquery.com/project/ScrollTo">jquery.ScrollTo</a> library.</p>\n<h2>Write Article with Embellish</h2>\n<p>The easiest way to use supplescroll is to compile your article with the static website generator <a href="http://boscoh.github.com/embellish">embellish</a>.</p>\n<p>To write the article, use the YAML/markdown format, for example in <a href="#fig-markdown"></a>.</p>\n<div id="fig-markdown"> <code>article.md</code> - example of an article in supplescroll\n<pre>\ntemplate: lucid.haml\ntitle: My Article\n---\n\n---\n# This is my Article in markdown\n\nI will talk about the following things\n\n## Code Fragment\nA code fragment [](#fig-code-fragment)\n&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n\n## A Photo\na photo [](#fig-photo)\n&lt;div id=\'fig-photo\'&gt;\n  &lt;img src=\'photo.jpg\'&gt;\n&lt;/div&gt;\n\n## A Video\na video [](#fig-youtube)\n&lt;div id=\'fig-youtube\'&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;</pre>\n</div>\n\n<p>The format consists of a: </p>\n<ol>\n<li>header in <a href="http://www.keleshev.com/yaml-quick-intoduction">YAML</a></li>\n<li>an excerpt</li>\n<li>body in <a href="https://daringfireball.net/projects/markdown/basics">markdown</a></li>\n</ol>\n<p>In the header, give the name of a supplescroll template you want to use:</p>\n<div class="codehilite"><pre>template: lucid.haml\n</pre></div>\n\n\n<p>There are several templates provided in the package:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<p>For embellish to work, two lines of: <code>---</code> are needed to separate the header and excerpt from the main body. Whilst the excerpt is optional, to avoid potential bugs with <code>---</code> later in the text, I\'d suggest:</p>\n<div class="codehilite"><pre>template: lucid.haml\n---\n---\n</pre></div>\n\n\n<h3>Headers</h3>\n<p>Write the text in markdown, making sure to use proper markdown headers, which will be used to construct the table of contents:</p>\n<div class="codehilite"><pre># A Header\n## A Secondary Header\n</pre></div>\n\n\n<h3>Figures</h3>\n<p>To create a figure, you must escape markdown with a <code>&lt;div&gt;</code> tag, and give the <code>&lt;div&gt;</code> an appropriate <code>id</code>:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-code&#39;&gt;\n&lt;code&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/code&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>Note: if you want to display HTML-code, make sure you escape special HTML characters (<code>&lt;</code>, <code>&amp;</code>) properly. Use an <a href="http://www.freeformatter.com/html-escape.html">HTML-escape sanitizer</a>.</p>\n<h3>Images</h3>\n<p>You\'d probably want to insert a photo:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-photo&#39;&gt;\n  &lt;img src=&#39;photo.jpg&#39;&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-photo"></a>.</p>\n<div id=\'fig-photo\'> A sample photo\n  <img src=\'photo.jpg\'>\n</div>\n\n<h3>Youtube Videos</h3>\n<p>Or how about a youtube video:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-youtube&#39;&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-youtube"></a>.</p>\n<div id=\'fig-youtube\'>\n  Link to youtube\n  <br><br>\n  <iframe src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div>\n\n<h3>Figure links</h3>\n<p>In the main text, links to figures are identified as relative links to <code>#fig*</code>:</p>\n<div class="codehilite"><pre>I will talk about a code fragment [](#fig-code-fragment).\n</pre></div>\n\n\n<p>These will be properly formatted, and linked to the relevant figure.</p>\n<h3>Compile to HTML</h3>\n<p>You then compile the page with: </p>\n<div class="codehilite"><pre> &gt; embellish .\n</pre></div>\n\n\n<p>Which makes <code>article.html</code>. The function webpage, which uses the lucid theme, consists of the files:</p>\n<ul>\n<li><code>article.html</code></li>\n<li><code>jquery-2.0.3.js</code></li>\n<li><code>jquery.scrollTo.js</code></li>\n<li><code>supplescroll.js</code></li>\n<li><code>supplescroll.css</code></li>\n<li><code>page.js</code></li>\n<li><code>lucid.css</code></li>\n</ul>\n<h2>Write Article directly in HTML</h2>\n<p>Of course, you don\'t have to use embellish to build your HTML file, you can write it yourself. To use the lucid theme, you\'d make an HTML file like <code>article.html</code> <a href="#fig-html"></a>.</p>\n<p>This shows all the necessary declarations, style-sheets &amp; javascript modules.</p>\n<div id=\'fig-html\'> <code>article.html</code> - key ingredients of an HTML article page that works with the lucid theme.\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;meta content=\'initial-scale=1.0\' name=\'viewport\' /&gt;\n  &lt;link href=\'supplescroll.css\' rel=\'stylesheet\' /&gt;\n  &lt;link href=\'lucid.css\' rel=\'stylesheet\' /&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\'sidebar touchscroll\'&gt;&lt;/div&gt;\n  &lt;div class=\'text touchscroll\'&gt;\n    &lt;div class=\'relative_position\'&gt;\n\n       &lt;!-- YOUR TEXT GOES HERE! --&gt;\n       &lt;h1&gt; This is My Article Header &lt;/h1&gt;\n\n       &lt;p&gt;I will talk about a code fragment\n       &lt;a href=&quot;#fig-code-fragment&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n      &lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n        &lt;pre&gt;Hello World&lt;/pre&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\'figures touchscroll\'&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\'jquery-2.0.3.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'jquery.scrollTo.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'supplescroll.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'page.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n</pre>\n</div>\n\n<p>The text of course will be written using HTML markup, with <code>&lt;p&gt;</code> tags and <code>&lt;i&gt;</code> tags and such impediments to writing.</p>\n<p>As above, header tags <code>&lt;h1&gt;</code>\'s etc., will be used to build the table of contents:</p>\n<div class="codehilite"><pre>&lt;h1&gt; This is My Article Header &lt;/h1&gt;\n</pre></div>\n\n\n<p>Any <code>&lt;div&gt;</code>s with <code>id="fig*"</code> will be copied into the figure list.</p>\n<div class="codehilite"><pre>&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>This is essentially what is generated with <code>embellish</code> in the section above.</p>\n<h2>Theme it Yourself</h2>\n<p>If you are familiar with the holy triumvirate of HTML/CSS/javascript, you might want to theme your own templates. To do this, you\'ll have to understand the internals of supplescroll so that all the HTML elements can happily work together. </p>\n<p>Note: the supplescroll modules are actually written in coffeescript, then compiled to javascript.</p>\n<p>Below, we\'ll discuss how supplescroll works with respect to the <code>lucid.haml</code> theme.</p>\n<h3>Page Loader</h3>\n<p>Your page needs to initialize supplescroll with javascript. In the package, <code>page.js</code> provides the entry point. Since jquery is included we can use jquery to register our <code>init</code> function.</p>\n<div class="codehilite"><pre>$(window).ready(init)\n</pre></div>\n\n\n<div id="fig-init"> <code>init</code> - page intialization function in coffeescript\n<pre>\ninit = () ->\n  text = $(text_href)\n  toc = $(toc_href)\n  figlist = $(figlist_href)\n  text_width = supplescroll.get_outer_width(text)\n\n  supplescroll.init_touchscroll()\n  supplescroll.build_page(toc_href, text_href, figlist_href)\n\n  $(window).resize(resize_window)\n  resize_window()\n</pre>\n</div>\n\n<p>The <code>init</code> function <a href="#fig-init"></a>:</p>\n<ol>\n<li>declares page variables</li>\n<li>calls the page builder </li>\n<li>registers the resize function</li>\n<li>calls the touchscroll initializer</li>\n</ol>\n<h3>Page Builder</h3>\n<p>The page builder is in the module <code>supplescroll.js</code>, which obviously, must be loaded first via the <code>&lt;script&gt;</code> tag in the HTML file. The function to build the page is:</p>\n<div class="codehilite"><pre>supplescroll.build_page(toc_href, text_href, figlist_href)\n</pre></div>\n\n\n<p>The three parameters are hrefs referring to an element in the DOM of the HTML page. If <code>toc_href</code> is empty string, the table of contents will not be built. Similarly for <code>figlist_href</code>.</p>\n<p>The table of contents is built from the header elements (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc.) in the <code>text_href</code> and inserted into the element referred to by <code>toc_href</code>.</p>\n<p>The text is then scanned for figures, which are identified as <code>&lt;div&gt;</code>\'s that have id\'s in the form <code>fig*</code>. These <code>&lt;div&gt;</code>\'s are then copied in the figure list. The original <code>&lt;div&gt;</code>\'s are hidden, but can be displayed by CSS class changes.</p>\n<p>It\'s important to ensure that each figure <code>&lt;div&gt;</code>s has a unique id.</p>\n<p>Then the text is scanned for <code>&lt;a&gt;</code> links that point to internal href\'s in the form <code>#fig*</code>. These links are linked to the corresponding figures in the figure list.</p>\n<p>The figure <code>&lt;div&gt;</code> id\'s are renamed consecutively from <code>(figure 1)</code> onwards.</p>\n<p>Finally, the location url is scannd and the initial header is assigned to the hash. </p>\n<h3>Smooth Scrolling with ScrollTo</h3>\n<p>One of the things that the page builder does is to put in custom callbacks for links, which use the jquery.ScrollTo plugin to smoothly  scroll to the text or figure of interest.</p>\n<p>However, for that to work, the <code>&lt;div&gt;</code> container must be sized properly. That is the explicit size of the <code>&lt;div&gt;</code> must be smaller than the onscreen window and have the CSS attribute</p>\n<div class="codehilite"><pre>overflow:auto\n</pre></div>\n\n\n<p>Furthermore, the page builder will add suffcient white-space to the end of these <code>&lt;div&gt;</code>s so that scrolling will always take the child element of interest to the top of the <code>&lt;div&gt;</code>.</p>\n<h3>Scrolling Callback</h3>\n<p>The supplescroll module overrides the <code>scroll</code> callback function in the main text element in order to detect which headers and figures are currently onscreen. On scrolling, the main text will scan for the first figure link, and if a new one pops up, will scroll the figure list to the that figure.</p>\n<p>For the <code>scroll</code> callback to work, it is <strong>imperative</strong> that the main text element has the CSS style:</p>\n<div class="codehilite"><pre>position:relative\n</pre></div>\n\n\n<p>Otherwise, the positions of elements in the main text cannot be calculated correctly.</p>\n<p>To do this, wrap the main-text in the HTML with the utility class <code>.relative_position</code></p>\n<h3>Overriding the resize function</h3>\n<p>The themes in supplescroll use custom resize functions to resize columns. This is optional, as you could do resizing through CSS.</p>\n<p>As a responsible web developer, you might ask, why would you override CSS for resizing?</p>\n<p>Well, I wanted multiple columns that spanned the whole page, where some columns had fixed widths, and others would expand to fill the remaining space. As well, I wanted the columns to fill the height of the page, but also to drop certain columns for mobile devices.</p>\n<p>Alas, you cannot do all that with CSS. </p>\n<p>So I wrote my own resize function. Here\'s a snippet for three-column resize <a href="#fig-resize-3"></a></p>\n<div id="fig-resize-3"> Code fragment showing three-column resize\n<pre>\ntoc.css(\'display\',\'block\')\nfiglist.css(\'display\',\'block\')\n\n# this function allows for some padding in the \n# body to be filter through the resize function\nbody_padding_left = parseInt($(document.body).css(\'padding-left\'))\nbody_padding_right = parseInt($(document.body).css(\'padding-right\'))\n\nsupplescroll.set_outer_width(text, text_width)\nsupplescroll.set_left(toc, body_padding_left)\n\nleft = supplescroll.get_right(toc)\nsupplescroll.set_left(text, left)\n\nleft = supplescroll.get_right(text)\nsupplescroll.set_left(figlist, left)\n\nfiglist_width = \\\n    window_width \\\n    - body_padding_left \\\n    - body_padding_right \\\n    - supplescroll.get_outer_width(toc) \\\n    - supplescroll.get_outer_width(text)\nsupplescroll.set_outer_width(figlist, figlist_width)\n</pre>\n</div>\n\n<p>First, we make sure <code>toc</code> (table of contents) and <code>figlist</code> (figure list) are switched on with <code>display:block</code>. To turn these off in 1-column display, these would be set to <code>display:none</code>.</p>\n<p>In three column mode, we want the main text to have a fixed width <code>text_width</code> for easy reading. </p>\n<p>One of the key to manually resizing is to fit the columns exactly onto the width of the window. This will prevent any bouncing effect of the page. This requires first that the CSS of the body and html to:</p>\n<div class="codehilite"><pre>body, html {\n  width: 100%;\n  height: 100%;\n  overflow: hidden\n}\n</pre></div>\n\n\n<p>Then, we need to set all the resizable elements to <code>position:absolute</code>, which will allow the following helper functions to work <a href="#fig-helper-fns"></a>.</p>\n<div id="fig-helper-fns">\n  <pre>\n# routines to get the absolute position of a jquery element\nsupplescroll.get_left\nsupplescroll.get_top\nsupplescroll.get_right\nsupplescroll.get_bottom\n\n# routines to set the absolute position of a jquery element\nsupplescroll.set_left\nsupplescroll.set_top\n\n# routines to get the dimensions of a jquery element\nsupplescroll.get_outer_width\nsupplescroll.get_outer_height\n\n# routines to set the dimensions of a jquery element\nsupplescroll.set_outer_width\nsupplescroll.set_outer_height\n  </pre>\n</div>\n\n<p>These helper functions can be used in combination with each other to get perfect placement in the resize function <a href="#fig-resize-3"></a>. For example, by getting the right edge of <code>toc</code> by <code>get_right</code>, and assigning this right edge to the left edge of <code>text</code> with <code>set_left</code>, we can place <code>toc</code> right next to <code>text</code>.</p>\n<p>We can also calculate exactly the <code>figlist_width</code> needed to fill the remaining space, and assign this to <code>figlist</code> via <code>set_outer_width</code>.</p>\n<p>Finally, the resize function looks for images in the <code>figlist</code> and resizes them to fit the column. If the column is big enough, then the image will be displayed at its natural dimensions. Simarly, youtube videos will be resized until it reaches a maximum size. A fixed aspect ratio is applied to all youtube videos.</p>\n<p>Note: Firefox sometimes screws up the sizes unless the <code>&lt;doctype&gt;</code> in the <code>&lt;head&gt;</code> is defined to html.</p>\n<h3>Touchscroll on IOS</h3>\n<p>Touch-based scrolling of webpages on iOS devices is really nice. However, the default scrolling in iOS does not work well with the <code>ScrollTo</code> library. To make it work properly, you need to do two things:</p>\n<ol>\n<li>add the class <code>.touchscroll</code> to scrollale elements</li>\n<li>initialize with <code>supplescroll.init_touchscroll()</code> </li>\n</ol>\n<p>The <code>.touchscroll</code> class enables inertia touch-based scrolling through the <code>-webkit-overflow-scrolling:touch</code> attribute, and sets <code>overflow:auto</code>. </p>\n<p><code>init_touchscroll()</code> shuts down inertial scrolling of all elements except the ones indicated by <code>.touchscroll</code>. As well, it adds a hack to avoid an unwanted default behavior of iOS. Normally, if an element has been scrolled to the edge of its scrolling area, this will trigger the inertial scrolling of its parent, and so on up, until the whole page scrolls. To avoid this <code>init_touchscroll()</code> overrides the <code>touch</code> callback with a function that prevents any <code>.touchscroll</code> element from reaching its edge.</p>\n<h3>Overriding styles</h3>\n<p>All the selections are displayed through CSS class changes, with the <code>.active</code> class applied to the active header in the <code>#table-of-contents</code>, the active <code>.figlink</code> in the <code>#main-text</code>, and the active <code>.fig-in-list</code> in <code>#figure-list</code>. These classes can be overriden to apply the display of your choice.</p>\n<p>&copy; 2014, Bosco K. Ho.</p>', 'sort_key': None, 'max_subpages': None, 'template': 'lucid.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'sample3'}, {'category': '', 'index': False, 'subpages': [], 'target': u'sample4.html', 'title': 'supplescroll documentation', 'url': u'sample4.html', 'checksum': '\xb1\xb7\x05kN0&\xaclq>\xac\x91\xca:[', 'rel_site_url': '.', 'excerpt': u"SUPPLESCROLL scrolling articles to your heart's delight Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling. It turns this documentation in markdown into this interactive webpage. Features: table of contents generated from headers figure list generated from &lt;div&gt;s back links of ...", 'modified': 1393202404.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/sample4.md', 'content': u'<h1>SUPPLESCROLL</h1>\n<p><em>scrolling articles to your heart\'s delight</em></p>\n<blockquote>\n<p>Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling.</p>\n</blockquote>\n<p>It turns this documentation in <a href="https://github.com/boscoh/supplescroll/blob/master/readme.md">markdown</a> into this <a href="http://boscoh.github.com/supplescroll">interactive webpage</a>.</p>\n<p>Features:</p>\n<ul>\n<li>table of contents generated from headers</li>\n<li>figure list generated from <code>&lt;div&gt;</code>s</li>\n<li>back links of figures to references in text</li>\n<li>smooth scrolling</li>\n<li>table of contents aware of text position</li>\n<li>the URL hashes respond to the text</li>\n</ul>\n<p>iOS-aware responsive-web themes:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, download from github:</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="https://github.com/boscoh/supplescroll/archive/master.zip">zip-package</a></p>\n<p>Then you should install <a href="http://boscoh.github.io/embellish">embellish</a>, which includes a coffeescript and sass compiler. </p>\n<p>Then edit the file <code>article.md</code> in markdown, following the guide below.</p>\n<p>When you\'re done, run:</p>\n<div class="codehilite"><pre>&gt; embellish .\n</pre></div>\n\n\n<p>And open <code>article.html</code>.</p>\n<h2>Source Code</h2>\n<p>You can browse the code at</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="http://github.com/boscoh/supplescroll">http://github.com/boscoh/supplescroll</a></p>\n<p>Please, fork and pull-request. </p>\n<p>New themes particularly welcome!</p>\n<p>Supplescroll was inspired by Ariel Flesier\'s <a href="http://plugins.jquery.com/project/ScrollTo">jquery.ScrollTo</a> library.</p>\n<h2>Write Article with Embellish</h2>\n<p>The easiest way to use supplescroll is to compile your article with the static website generator <a href="http://boscoh.github.com/embellish">embellish</a>.</p>\n<p>To write the article, use the YAML/markdown format, for example in <a href="#fig-markdown"></a>.</p>\n<div id="fig-markdown"> <code>article.md</code> - example of an article in supplescroll\n<pre>\ntemplate: yeolde.haml\ntitle: My Article\n---\n\n---\n# This is my Article in markdown\n\nI will talk about the following things\n\n## Code Fragment\nA code fragment [](#fig-code-fragment)\n&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n\n## A Photo\na photo [](#fig-photo)\n&lt;div id=\'fig-photo\'&gt;\n  &lt;img src=\'photo.jpg\'&gt;\n&lt;/div&gt;\n\n## A Video\na video [](#fig-youtube)\n&lt;div id=\'fig-youtube\'&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;</pre>\n</div>\n\n<p>The format consists of a: </p>\n<ol>\n<li>header in <a href="http://www.keleshev.com/yaml-quick-intoduction">YAML</a></li>\n<li>an excerpt</li>\n<li>body in <a href="https://daringfireball.net/projects/markdown/basics">markdown</a></li>\n</ol>\n<p>In the header, give the name of a supplescroll template you want to use:</p>\n<div class="codehilite"><pre>template: lucid.haml\n</pre></div>\n\n\n<p>There are several templates provided in the package:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<p>For embellish to work, two lines of: <code>---</code> are needed to separate the header and excerpt from the main body. Whilst the excerpt is optional, to avoid potential bugs with <code>---</code> later in the text, I\'d suggest:</p>\n<div class="codehilite"><pre>template: lucid.haml\n---\n---\n</pre></div>\n\n\n<h3>Headers</h3>\n<p>Write the text in markdown, making sure to use proper markdown headers, which will be used to construct the table of contents:</p>\n<div class="codehilite"><pre># A Header\n## A Secondary Header\n</pre></div>\n\n\n<h3>Figures</h3>\n<p>To create a figure, you must escape markdown with a <code>&lt;div&gt;</code> tag, and give the <code>&lt;div&gt;</code> an appropriate <code>id</code>:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-code&#39;&gt;\n&lt;code&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/code&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>Note: if you want to display HTML-code, make sure you escape special HTML characters (<code>&lt;</code>, <code>&amp;</code>) properly. Use an <a href="http://www.freeformatter.com/html-escape.html">HTML-escape sanitizer</a>.</p>\n<h3>Images</h3>\n<p>You\'d probably want to insert a photo:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-photo&#39;&gt;\n  &lt;img src=&#39;photo.jpg&#39;&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-photo"></a>.</p>\n<div id=\'fig-photo\'> A sample photo\n  <img src=\'photo.jpg\'>\n</div>\n\n<h3>Youtube Videos</h3>\n<p>Or how about a youtube video:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-youtube&#39;&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-youtube"></a>.</p>\n<div id=\'fig-youtube\'>\n  Link to youtube\n  <br><br>\n  <iframe src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div>\n\n<h3>Figure links</h3>\n<p>In the main text, links to figures are identified as relative links to <code>#fig*</code>:</p>\n<div class="codehilite"><pre>I will talk about a code fragment [](#fig-code-fragment).\n</pre></div>\n\n\n<p>These will be properly formatted, and linked to the relevant figure.</p>\n<h3>Compile to HTML</h3>\n<p>You then compile the page with: </p>\n<div class="codehilite"><pre> &gt; embellish .\n</pre></div>\n\n\n<p>Which makes <code>article.html</code>. The function webpage, which uses the lucid theme, consists of the files:</p>\n<ul>\n<li><code>article.html</code></li>\n<li><code>jquery-2.0.3.js</code></li>\n<li><code>jquery.scrollTo.js</code></li>\n<li><code>supplescroll.js</code></li>\n<li><code>supplescroll.css</code></li>\n<li><code>page.js</code></li>\n<li><code>lucid.css</code></li>\n</ul>\n<h2>Write Article directly in HTML</h2>\n<p>Of course, you don\'t have to use embellish to build your HTML file, you can write it yourself. To use the lucid theme, you\'d make an HTML file like <code>article.html</code> <a href="#fig-html"></a>.</p>\n<p>This shows all the necessary declarations, style-sheets &amp; javascript modules.</p>\n<div id=\'fig-html\'> <code>article.html</code> - key ingredients of an HTML article page that works with the lucid theme.\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;meta content=\'initial-scale=1.0\' name=\'viewport\' /&gt;\n  &lt;link href=\'supplescroll.css\' rel=\'stylesheet\' /&gt;\n  &lt;link href=\'lucid.css\' rel=\'stylesheet\' /&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\'sidebar touchscroll\'&gt;&lt;/div&gt;\n  &lt;div class=\'text touchscroll\'&gt;\n    &lt;div class=\'relative_position\'&gt;\n\n       &lt;!-- YOUR TEXT GOES HERE! --&gt;\n       &lt;h1&gt; This is My Article Header &lt;/h1&gt;\n\n       &lt;p&gt;I will talk about a code fragment\n       &lt;a href=&quot;#fig-code-fragment&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n      &lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n        &lt;pre&gt;Hello World&lt;/pre&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\'figures touchscroll\'&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\'jquery-2.0.3.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'jquery.scrollTo.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'supplescroll.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'page.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n</pre>\n</div>\n\n<p>The text of course will be written using HTML markup, with <code>&lt;p&gt;</code> tags and <code>&lt;i&gt;</code> tags and such impediments to writing.</p>\n<p>As above, header tags <code>&lt;h1&gt;</code>\'s etc., will be used to build the table of contents:</p>\n<div class="codehilite"><pre>&lt;h1&gt; This is My Article Header &lt;/h1&gt;\n</pre></div>\n\n\n<p>Any <code>&lt;div&gt;</code>s with <code>id="fig*"</code> will be copied into the figure list.</p>\n<div class="codehilite"><pre>&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>This is essentially what is generated with <code>embellish</code> in the section above.</p>\n<h2>Theme it Yourself</h2>\n<p>If you are familiar with the holy triumvirate of HTML/CSS/javascript, you might want to theme your own templates. To do this, you\'ll have to understand the internals of supplescroll so that all the HTML elements can happily work together. </p>\n<p>Note: the supplescroll modules are actually written in coffeescript, then compiled to javascript.</p>\n<p>Below, we\'ll discuss how supplescroll works with respect to the <code>lucid.haml</code> theme.</p>\n<h3>Page Loader</h3>\n<p>Your page needs to initialize supplescroll with javascript. In the package, <code>page.js</code> provides the entry point. Since jquery is included we can use jquery to register our <code>init</code> function.</p>\n<div class="codehilite"><pre>$(window).ready(init)\n</pre></div>\n\n\n<div id="fig-init"> <code>init</code> - page intialization function in coffeescript\n<pre>\ninit = () ->\n  text = $(text_href)\n  toc = $(toc_href)\n  figlist = $(figlist_href)\n  text_width = supplescroll.get_outer_width(text)\n\n  supplescroll.init_touchscroll()\n  supplescroll.build_page(toc_href, text_href, figlist_href)\n\n  $(window).resize(resize_window)\n  resize_window()\n</pre>\n</div>\n\n<p>The <code>init</code> function <a href="#fig-init"></a>:</p>\n<ol>\n<li>declares page variables</li>\n<li>calls the page builder </li>\n<li>registers the resize function</li>\n<li>calls the touchscroll initializer</li>\n</ol>\n<h3>Page Builder</h3>\n<p>The page builder is in the module <code>supplescroll.js</code>, which obviously, must be loaded first via the <code>&lt;script&gt;</code> tag in the HTML file. The function to build the page is:</p>\n<div class="codehilite"><pre>supplescroll.build_page(toc_href, text_href, figlist_href)\n</pre></div>\n\n\n<p>The three parameters are hrefs referring to an element in the DOM of the HTML page. If <code>toc_href</code> is empty string, the table of contents will not be built. Similarly for <code>figlist_href</code>.</p>\n<p>The table of contents is built from the header elements (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc.) in the <code>text_href</code> and inserted into the element referred to by <code>toc_href</code>.</p>\n<p>The text is then scanned for figures, which are identified as <code>&lt;div&gt;</code>\'s that have id\'s in the form <code>fig*</code>. These <code>&lt;div&gt;</code>\'s are then copied in the figure list. The original <code>&lt;div&gt;</code>\'s are hidden, but can be displayed by CSS class changes.</p>\n<p>It\'s important to ensure that each figure <code>&lt;div&gt;</code>s has a unique id.</p>\n<p>Then the text is scanned for <code>&lt;a&gt;</code> links that point to internal href\'s in the form <code>#fig*</code>. These links are linked to the corresponding figures in the figure list.</p>\n<p>The figure <code>&lt;div&gt;</code> id\'s are renamed consecutively from <code>(figure 1)</code> onwards.</p>\n<p>Finally, the location url is scannd and the initial header is assigned to the hash. </p>\n<h3>Smooth Scrolling with ScrollTo</h3>\n<p>One of the things that the page builder does is to put in custom callbacks for links, which use the jquery.ScrollTo plugin to smoothly  scroll to the text or figure of interest.</p>\n<p>However, for that to work, the <code>&lt;div&gt;</code> container must be sized properly. That is the explicit size of the <code>&lt;div&gt;</code> must be smaller than the onscreen window and have the CSS attribute</p>\n<div class="codehilite"><pre>overflow:auto\n</pre></div>\n\n\n<p>Furthermore, the page builder will add suffcient white-space to the end of these <code>&lt;div&gt;</code>s so that scrolling will always take the child element of interest to the top of the <code>&lt;div&gt;</code>.</p>\n<h3>Scrolling Callback</h3>\n<p>The supplescroll module overrides the <code>scroll</code> callback function in the main text element in order to detect which headers and figures are currently onscreen. On scrolling, the main text will scan for the first figure link, and if a new one pops up, will scroll the figure list to the that figure.</p>\n<p>For the <code>scroll</code> callback to work, it is <strong>imperative</strong> that the main text element has the CSS style:</p>\n<div class="codehilite"><pre>position:relative\n</pre></div>\n\n\n<p>Otherwise, the positions of elements in the main text cannot be calculated correctly.</p>\n<p>To do this, wrap the main-text in the HTML with the utility class <code>.relative_position</code></p>\n<h3>Overriding the resize function</h3>\n<p>The themes in supplescroll use custom resize functions to resize columns. This is optional, as you could do resizing through CSS.</p>\n<p>As a responsible web developer, you might ask, why would you override CSS for resizing?</p>\n<p>Well, I wanted multiple columns that spanned the whole page, where some columns had fixed widths, and others would expand to fill the remaining space. As well, I wanted the columns to fill the height of the page, but also to drop certain columns for mobile devices.</p>\n<p>Alas, you cannot do all that with CSS. </p>\n<p>So I wrote my own resize function. Here\'s a snippet for three-column resize <a href="#fig-resize-3"></a></p>\n<div id="fig-resize-3"> Code fragment showing three-column resize\n<pre>\ntoc.css(\'display\',\'block\')\nfiglist.css(\'display\',\'block\')\n\n# this function allows for some padding in the \n# body to be filter through the resize function\nbody_padding_left = parseInt($(document.body).css(\'padding-left\'))\nbody_padding_right = parseInt($(document.body).css(\'padding-right\'))\n\nsupplescroll.set_outer_width(text, text_width)\nsupplescroll.set_left(toc, body_padding_left)\n\nleft = supplescroll.get_right(toc)\nsupplescroll.set_left(text, left)\n\nleft = supplescroll.get_right(text)\nsupplescroll.set_left(figlist, left)\n\nfiglist_width = \\\n    window_width \\\n    - body_padding_left \\\n    - body_padding_right \\\n    - supplescroll.get_outer_width(toc) \\\n    - supplescroll.get_outer_width(text)\nsupplescroll.set_outer_width(figlist, figlist_width)\n</pre>\n</div>\n\n<p>First, we make sure <code>toc</code> (table of contents) and <code>figlist</code> (figure list) are switched on with <code>display:block</code>. To turn these off in 1-column display, these would be set to <code>display:none</code>.</p>\n<p>In three column mode, we want the main text to have a fixed width <code>text_width</code> for easy reading. </p>\n<p>One of the key to manually resizing is to fit the columns exactly onto the width of the window. This will prevent any bouncing effect of the page. This requires first that the CSS of the body and html to:</p>\n<div class="codehilite"><pre>body, html {\n  width: 100%;\n  height: 100%;\n  overflow: hidden\n}\n</pre></div>\n\n\n<p>Then, we need to set all the resizable elements to <code>position:absolute</code>, which will allow the following helper functions to work <a href="#fig-helper-fns"></a>.</p>\n<div id="fig-helper-fns">\n  <pre>\n# routines to get the absolute position of a jquery element\nsupplescroll.get_left\nsupplescroll.get_top\nsupplescroll.get_right\nsupplescroll.get_bottom\n\n# routines to set the absolute position of a jquery element\nsupplescroll.set_left\nsupplescroll.set_top\n\n# routines to get the dimensions of a jquery element\nsupplescroll.get_outer_width\nsupplescroll.get_outer_height\n\n# routines to set the dimensions of a jquery element\nsupplescroll.set_outer_width\nsupplescroll.set_outer_height\n  </pre>\n</div>\n\n<p>These helper functions can be used in combination with each other to get perfect placement in the resize function <a href="#fig-resize-3"></a>. For example, by getting the right edge of <code>toc</code> by <code>get_right</code>, and assigning this right edge to the left edge of <code>text</code> with <code>set_left</code>, we can place <code>toc</code> right next to <code>text</code>.</p>\n<p>We can also calculate exactly the <code>figlist_width</code> needed to fill the remaining space, and assign this to <code>figlist</code> via <code>set_outer_width</code>.</p>\n<p>Finally, the resize function looks for images in the <code>figlist</code> and resizes them to fit the column. If the column is big enough, then the image will be displayed at its natural dimensions. Simarly, youtube videos will be resized until it reaches a maximum size. A fixed aspect ratio is applied to all youtube videos.</p>\n<p>Note: Firefox sometimes screws up the sizes unless the <code>&lt;doctype&gt;</code> in the <code>&lt;head&gt;</code> is defined to html.</p>\n<h3>Touchscroll on IOS</h3>\n<p>Touch-based scrolling of webpages on iOS devices is really nice. However, the default scrolling in iOS does not work well with the <code>ScrollTo</code> library. To make it work properly, you need to do two things:</p>\n<ol>\n<li>add the class <code>.touchscroll</code> to scrollale elements</li>\n<li>initialize with <code>supplescroll.init_touchscroll()</code> </li>\n</ol>\n<p>The <code>.touchscroll</code> class enables inertia touch-based scrolling through the <code>-webkit-overflow-scrolling:touch</code> attribute, and sets <code>overflow:auto</code>. </p>\n<p><code>init_touchscroll()</code> shuts down inertial scrolling of all elements except the ones indicated by <code>.touchscroll</code>. As well, it adds a hack to avoid an unwanted default behavior of iOS. Normally, if an element has been scrolled to the edge of its scrolling area, this will trigger the inertial scrolling of its parent, and so on up, until the whole page scrolls. To avoid this <code>init_touchscroll()</code> overrides the <code>touch</code> callback with a function that prevents any <code>.touchscroll</code> element from reaching its edge.</p>\n<h3>Overriding styles</h3>\n<p>All the selections are displayed through CSS class changes, with the <code>.active</code> class applied to the active header in the <code>#table-of-contents</code>, the active <code>.figlink</code> in the <code>#main-text</code>, and the active <code>.fig-in-list</code> in <code>#figure-list</code>. These classes can be overriden to apply the display of your choice.</p>\n<p>&copy; 2014, Bosco K. Ho.</p>', 'sort_key': None, 'max_subpages': None, 'template': 'yeolde.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'sample4'}, {'category': '', 'index': False, 'subpages': [], 'target': u'sample5.html', 'title': 'supplescroll documentation', 'url': u'sample5.html', 'checksum': '\xd8\x1f"l\x1cu\xbaum\xc7-\xf4Y\xa6W\x80', 'rel_site_url': '.', 'excerpt': u"SUPPLESCROLL scrolling articles to your heart's delight Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling. It turns this documentation in markdown into this interactive webpage. Features: table of contents generated from headers figure list generated from &lt;div&gt;s back links of ...", 'modified': 1393202404.0, 'filename': '/Users/bosco/Dropbox/public/supplescroll/sample5.md', 'content': u'<h1>SUPPLESCROLL</h1>\n<p><em>scrolling articles to your heart\'s delight</em></p>\n<blockquote>\n<p>Supplescroll is a javascript plugin that dynamically generates an interactive document knitted together with some very supple scrolling.</p>\n</blockquote>\n<p>It turns this documentation in <a href="https://github.com/boscoh/supplescroll/blob/master/readme.md">markdown</a> into this <a href="http://boscoh.github.com/supplescroll">interactive webpage</a>.</p>\n<p>Features:</p>\n<ul>\n<li>table of contents generated from headers</li>\n<li>figure list generated from <code>&lt;div&gt;</code>s</li>\n<li>back links of figures to references in text</li>\n<li>smooth scrolling</li>\n<li>table of contents aware of text position</li>\n<li>the URL hashes respond to the text</li>\n</ul>\n<p>iOS-aware responsive-web themes:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<h2>Installation</h2>\n<p>To install the package, download from github:</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="https://github.com/boscoh/supplescroll/archive/master.zip">zip-package</a></p>\n<p>Then you should install <a href="http://boscoh.github.io/embellish">embellish</a>, which includes a coffeescript and sass compiler. </p>\n<p>Then edit the file <code>article.md</code> in markdown, following the guide below.</p>\n<p>When you\'re done, run:</p>\n<div class="codehilite"><pre>&gt; embellish .\n</pre></div>\n\n\n<p>And open <code>article.html</code>.</p>\n<h2>Source Code</h2>\n<p>You can browse the code at</p>\n<p>&nbsp;&nbsp;&nbsp; <a href="http://github.com/boscoh/supplescroll">http://github.com/boscoh/supplescroll</a></p>\n<p>Please, fork and pull-request. </p>\n<p>New themes particularly welcome!</p>\n<p>Supplescroll was inspired by Ariel Flesier\'s <a href="http://plugins.jquery.com/project/ScrollTo">jquery.ScrollTo</a> library.</p>\n<h2>Write Article with Embellish</h2>\n<p>The easiest way to use supplescroll is to compile your article with the static website generator <a href="http://boscoh.github.com/embellish">embellish</a>.</p>\n<p>To write the article, use the YAML/markdown format, for example in <a href="#fig-markdown"></a>.</p>\n<div id="fig-markdown"> <code>article.md</code> - example of an article in supplescroll\n<pre>\ntemplate: clown.haml\ntitle: My Article\n---\n\n---\n# This is my Article in markdown\n\nI will talk about the following things\n\n## Code Fragment\nA code fragment [](#fig-code-fragment)\n&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n\n## A Photo\na photo [](#fig-photo)\n&lt;div id=\'fig-photo\'&gt;\n  &lt;img src=\'photo.jpg\'&gt;\n&lt;/div&gt;\n\n## A Video\na video [](#fig-youtube)\n&lt;div id=\'fig-youtube\'&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;</pre>\n</div>\n\n<p>The format consists of a: </p>\n<ol>\n<li>header in <a href="http://www.keleshev.com/yaml-quick-intoduction">YAML</a></li>\n<li>an excerpt</li>\n<li>body in <a href="https://daringfireball.net/projects/markdown/basics">markdown</a></li>\n</ol>\n<p>In the header, give the name of a supplescroll template you want to use:</p>\n<div class="codehilite"><pre>template: lucid.haml\n</pre></div>\n\n\n<p>There are several templates provided in the package:</p>\n<ul>\n<li><code>dark.haml</code> (<a href="http://boscoh.github.com/supplescroll/index.html">sample</a>)</li>\n<li><code>light.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample2.html">sample</a>)</li>\n<li><code>lucid.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample3.html">sample</a>)</li>\n<li><code>yeolde.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample4.html">sample</a>)</li>\n<li><code>clown.haml</code> (<a href="http://boscoh.github.com/supplescroll/sample5.html">sample</a>)</li>\n</ul>\n<p>For embellish to work, two lines of: <code>---</code> are needed to separate the header and excerpt from the main body. Whilst the excerpt is optional, to avoid potential bugs with <code>---</code> later in the text, I\'d suggest:</p>\n<div class="codehilite"><pre>template: lucid.haml\n---\n---\n</pre></div>\n\n\n<h3>Headers</h3>\n<p>Write the text in markdown, making sure to use proper markdown headers, which will be used to construct the table of contents:</p>\n<div class="codehilite"><pre># A Header\n## A Secondary Header\n</pre></div>\n\n\n<h3>Figures</h3>\n<p>To create a figure, you must escape markdown with a <code>&lt;div&gt;</code> tag, and give the <code>&lt;div&gt;</code> an appropriate <code>id</code>:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-code&#39;&gt;\n&lt;code&gt;&lt;pre&gt;Hello World&lt;/pre&gt;&lt;/code&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>Note: if you want to display HTML-code, make sure you escape special HTML characters (<code>&lt;</code>, <code>&amp;</code>) properly. Use an <a href="http://www.freeformatter.com/html-escape.html">HTML-escape sanitizer</a>.</p>\n<h3>Images</h3>\n<p>You\'d probably want to insert a photo:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-photo&#39;&gt;\n  &lt;img src=&#39;photo.jpg&#39;&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-photo"></a>.</p>\n<div id=\'fig-photo\'> A sample photo\n  <img src=\'photo.jpg\'>\n</div>\n\n<h3>Youtube Videos</h3>\n<p>Or how about a youtube video:</p>\n<div class="codehilite"><pre>&lt;div id=&#39;fig-youtube&#39;&gt;\n  Link to youtube\n  &lt;br&gt;&lt;br&gt;\n  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&amp;start=52&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>which would take you here <a href="#fig-youtube"></a>.</p>\n<div id=\'fig-youtube\'>\n  Link to youtube\n  <br><br>\n  <iframe src="http://www.youtube.com/embed/Fk5reVYChlo?list=FLnRk0rt9QwA9a_mmCvlfXDw&start=52" frameborder="0" allowfullscreen></iframe>\n</div>\n\n<h3>Figure links</h3>\n<p>In the main text, links to figures are identified as relative links to <code>#fig*</code>:</p>\n<div class="codehilite"><pre>I will talk about a code fragment [](#fig-code-fragment).\n</pre></div>\n\n\n<p>These will be properly formatted, and linked to the relevant figure.</p>\n<h3>Compile to HTML</h3>\n<p>You then compile the page with: </p>\n<div class="codehilite"><pre> &gt; embellish .\n</pre></div>\n\n\n<p>Which makes <code>article.html</code>. The function webpage, which uses the lucid theme, consists of the files:</p>\n<ul>\n<li><code>article.html</code></li>\n<li><code>jquery-2.0.3.js</code></li>\n<li><code>jquery.scrollTo.js</code></li>\n<li><code>supplescroll.js</code></li>\n<li><code>supplescroll.css</code></li>\n<li><code>page.js</code></li>\n<li><code>lucid.css</code></li>\n</ul>\n<h2>Write Article directly in HTML</h2>\n<p>Of course, you don\'t have to use embellish to build your HTML file, you can write it yourself. To use the lucid theme, you\'d make an HTML file like <code>article.html</code> <a href="#fig-html"></a>.</p>\n<p>This shows all the necessary declarations, style-sheets &amp; javascript modules.</p>\n<div id=\'fig-html\'> <code>article.html</code> - key ingredients of an HTML article page that works with the lucid theme.\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n  &lt;meta content=\'initial-scale=1.0\' name=\'viewport\' /&gt;\n  &lt;link href=\'supplescroll.css\' rel=\'stylesheet\' /&gt;\n  &lt;link href=\'lucid.css\' rel=\'stylesheet\' /&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\'sidebar touchscroll\'&gt;&lt;/div&gt;\n  &lt;div class=\'text touchscroll\'&gt;\n    &lt;div class=\'relative_position\'&gt;\n\n       &lt;!-- YOUR TEXT GOES HERE! --&gt;\n       &lt;h1&gt; This is My Article Header &lt;/h1&gt;\n\n       &lt;p&gt;I will talk about a code fragment\n       &lt;a href=&quot;#fig-code-fragment&quot;&gt;&lt;/a&gt;&lt;/p&gt;\n\n      &lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n        &lt;pre&gt;Hello World&lt;/pre&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\'figures touchscroll\'&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\'jquery-2.0.3.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'jquery.scrollTo.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'supplescroll.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n&lt;script src=\'page.js\' type=\'text/javascript\'&gt;&lt;/script&gt;\n</pre>\n</div>\n\n<p>The text of course will be written using HTML markup, with <code>&lt;p&gt;</code> tags and <code>&lt;i&gt;</code> tags and such impediments to writing.</p>\n<p>As above, header tags <code>&lt;h1&gt;</code>\'s etc., will be used to build the table of contents:</p>\n<div class="codehilite"><pre>&lt;h1&gt; This is My Article Header &lt;/h1&gt;\n</pre></div>\n\n\n<p>Any <code>&lt;div&gt;</code>s with <code>id="fig*"</code> will be copied into the figure list.</p>\n<div class="codehilite"><pre>&lt;div id=&quot;fig-code-fragment&quot;&gt; A Code Fragment\n  &lt;pre&gt;Hello World&lt;/pre&gt;\n&lt;/div&gt;\n</pre></div>\n\n\n<p>This is essentially what is generated with <code>embellish</code> in the section above.</p>\n<h2>Theme it Yourself</h2>\n<p>If you are familiar with the holy triumvirate of HTML/CSS/javascript, you might want to theme your own templates. To do this, you\'ll have to understand the internals of supplescroll so that all the HTML elements can happily work together. </p>\n<p>Note: the supplescroll modules are actually written in coffeescript, then compiled to javascript.</p>\n<p>Below, we\'ll discuss how supplescroll works with respect to the <code>lucid.haml</code> theme.</p>\n<h3>Page Loader</h3>\n<p>Your page needs to initialize supplescroll with javascript. In the package, <code>page.js</code> provides the entry point. Since jquery is included we can use jquery to register our <code>init</code> function.</p>\n<div class="codehilite"><pre>$(window).ready(init)\n</pre></div>\n\n\n<div id="fig-init"> <code>init</code> - page intialization function in coffeescript\n<pre>\ninit = () ->\n  text = $(text_href)\n  toc = $(toc_href)\n  figlist = $(figlist_href)\n  text_width = supplescroll.get_outer_width(text)\n\n  supplescroll.init_touchscroll()\n  supplescroll.build_page(toc_href, text_href, figlist_href)\n\n  $(window).resize(resize_window)\n  resize_window()\n</pre>\n</div>\n\n<p>The <code>init</code> function <a href="#fig-init"></a>:</p>\n<ol>\n<li>declares page variables</li>\n<li>calls the page builder </li>\n<li>registers the resize function</li>\n<li>calls the touchscroll initializer</li>\n</ol>\n<h3>Page Builder</h3>\n<p>The page builder is in the module <code>supplescroll.js</code>, which obviously, must be loaded first via the <code>&lt;script&gt;</code> tag in the HTML file. The function to build the page is:</p>\n<div class="codehilite"><pre>supplescroll.build_page(toc_href, text_href, figlist_href)\n</pre></div>\n\n\n<p>The three parameters are hrefs referring to an element in the DOM of the HTML page. If <code>toc_href</code> is empty string, the table of contents will not be built. Similarly for <code>figlist_href</code>.</p>\n<p>The table of contents is built from the header elements (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> etc.) in the <code>text_href</code> and inserted into the element referred to by <code>toc_href</code>.</p>\n<p>The text is then scanned for figures, which are identified as <code>&lt;div&gt;</code>\'s that have id\'s in the form <code>fig*</code>. These <code>&lt;div&gt;</code>\'s are then copied in the figure list. The original <code>&lt;div&gt;</code>\'s are hidden, but can be displayed by CSS class changes.</p>\n<p>It\'s important to ensure that each figure <code>&lt;div&gt;</code>s has a unique id.</p>\n<p>Then the text is scanned for <code>&lt;a&gt;</code> links that point to internal href\'s in the form <code>#fig*</code>. These links are linked to the corresponding figures in the figure list.</p>\n<p>The figure <code>&lt;div&gt;</code> id\'s are renamed consecutively from <code>(figure 1)</code> onwards.</p>\n<p>Finally, the location url is scannd and the initial header is assigned to the hash. </p>\n<h3>Smooth Scrolling with ScrollTo</h3>\n<p>One of the things that the page builder does is to put in custom callbacks for links, which use the jquery.ScrollTo plugin to smoothly  scroll to the text or figure of interest.</p>\n<p>However, for that to work, the <code>&lt;div&gt;</code> container must be sized properly. That is the explicit size of the <code>&lt;div&gt;</code> must be smaller than the onscreen window and have the CSS attribute</p>\n<div class="codehilite"><pre>overflow:auto\n</pre></div>\n\n\n<p>Furthermore, the page builder will add suffcient white-space to the end of these <code>&lt;div&gt;</code>s so that scrolling will always take the child element of interest to the top of the <code>&lt;div&gt;</code>.</p>\n<h3>Scrolling Callback</h3>\n<p>The supplescroll module overrides the <code>scroll</code> callback function in the main text element in order to detect which headers and figures are currently onscreen. On scrolling, the main text will scan for the first figure link, and if a new one pops up, will scroll the figure list to the that figure.</p>\n<p>For the <code>scroll</code> callback to work, it is <strong>imperative</strong> that the main text element has the CSS style:</p>\n<div class="codehilite"><pre>position:relative\n</pre></div>\n\n\n<p>Otherwise, the positions of elements in the main text cannot be calculated correctly.</p>\n<p>To do this, wrap the main-text in the HTML with the utility class <code>.relative_position</code></p>\n<h3>Overriding the resize function</h3>\n<p>The themes in supplescroll use custom resize functions to resize columns. This is optional, as you could do resizing through CSS.</p>\n<p>As a responsible web developer, you might ask, why would you override CSS for resizing?</p>\n<p>Well, I wanted multiple columns that spanned the whole page, where some columns had fixed widths, and others would expand to fill the remaining space. As well, I wanted the columns to fill the height of the page, but also to drop certain columns for mobile devices.</p>\n<p>Alas, you cannot do all that with CSS. </p>\n<p>So I wrote my own resize function. Here\'s a snippet for three-column resize <a href="#fig-resize-3"></a></p>\n<div id="fig-resize-3"> Code fragment showing three-column resize\n<pre>\ntoc.css(\'display\',\'block\')\nfiglist.css(\'display\',\'block\')\n\n# this function allows for some padding in the \n# body to be filter through the resize function\nbody_padding_left = parseInt($(document.body).css(\'padding-left\'))\nbody_padding_right = parseInt($(document.body).css(\'padding-right\'))\n\nsupplescroll.set_outer_width(text, text_width)\nsupplescroll.set_left(toc, body_padding_left)\n\nleft = supplescroll.get_right(toc)\nsupplescroll.set_left(text, left)\n\nleft = supplescroll.get_right(text)\nsupplescroll.set_left(figlist, left)\n\nfiglist_width = \\\n    window_width \\\n    - body_padding_left \\\n    - body_padding_right \\\n    - supplescroll.get_outer_width(toc) \\\n    - supplescroll.get_outer_width(text)\nsupplescroll.set_outer_width(figlist, figlist_width)\n</pre>\n</div>\n\n<p>First, we make sure <code>toc</code> (table of contents) and <code>figlist</code> (figure list) are switched on with <code>display:block</code>. To turn these off in 1-column display, these would be set to <code>display:none</code>.</p>\n<p>In three column mode, we want the main text to have a fixed width <code>text_width</code> for easy reading. </p>\n<p>One of the key to manually resizing is to fit the columns exactly onto the width of the window. This will prevent any bouncing effect of the page. This requires first that the CSS of the body and html to:</p>\n<div class="codehilite"><pre>body, html {\n  width: 100%;\n  height: 100%;\n  overflow: hidden\n}\n</pre></div>\n\n\n<p>Then, we need to set all the resizable elements to <code>position:absolute</code>, which will allow the following helper functions to work <a href="#fig-helper-fns"></a>.</p>\n<div id="fig-helper-fns">\n  <pre>\n# routines to get the absolute position of a jquery element\nsupplescroll.get_left\nsupplescroll.get_top\nsupplescroll.get_right\nsupplescroll.get_bottom\n\n# routines to set the absolute position of a jquery element\nsupplescroll.set_left\nsupplescroll.set_top\n\n# routines to get the dimensions of a jquery element\nsupplescroll.get_outer_width\nsupplescroll.get_outer_height\n\n# routines to set the dimensions of a jquery element\nsupplescroll.set_outer_width\nsupplescroll.set_outer_height\n  </pre>\n</div>\n\n<p>These helper functions can be used in combination with each other to get perfect placement in the resize function <a href="#fig-resize-3"></a>. For example, by getting the right edge of <code>toc</code> by <code>get_right</code>, and assigning this right edge to the left edge of <code>text</code> with <code>set_left</code>, we can place <code>toc</code> right next to <code>text</code>.</p>\n<p>We can also calculate exactly the <code>figlist_width</code> needed to fill the remaining space, and assign this to <code>figlist</code> via <code>set_outer_width</code>.</p>\n<p>Finally, the resize function looks for images in the <code>figlist</code> and resizes them to fit the column. If the column is big enough, then the image will be displayed at its natural dimensions. Simarly, youtube videos will be resized until it reaches a maximum size. A fixed aspect ratio is applied to all youtube videos.</p>\n<p>Note: Firefox sometimes screws up the sizes unless the <code>&lt;doctype&gt;</code> in the <code>&lt;head&gt;</code> is defined to html.</p>\n<h3>Touchscroll on IOS</h3>\n<p>Touch-based scrolling of webpages on iOS devices is really nice. However, the default scrolling in iOS does not work well with the <code>ScrollTo</code> library. To make it work properly, you need to do two things:</p>\n<ol>\n<li>add the class <code>.touchscroll</code> to scrollale elements</li>\n<li>initialize with <code>supplescroll.init_touchscroll()</code> </li>\n</ol>\n<p>The <code>.touchscroll</code> class enables inertia touch-based scrolling through the <code>-webkit-overflow-scrolling:touch</code> attribute, and sets <code>overflow:auto</code>. </p>\n<p><code>init_touchscroll()</code> shuts down inertial scrolling of all elements except the ones indicated by <code>.touchscroll</code>. As well, it adds a hack to avoid an unwanted default behavior of iOS. Normally, if an element has been scrolled to the edge of its scrolling area, this will trigger the inertial scrolling of its parent, and so on up, until the whole page scrolls. To avoid this <code>init_touchscroll()</code> overrides the <code>touch</code> callback with a function that prevents any <code>.touchscroll</code> element from reaching its edge.</p>\n<h3>Overriding styles</h3>\n<p>All the selections are displayed through CSS class changes, with the <code>.active</code> class applied to the active header in the <code>#table-of-contents</code>, the active <code>.figlink</code> in the <code>#main-text</code>, and the active <code>.fig-in-list</code> in <code>#figure-list</code>. These classes can be overriden to apply the display of your choice.</p>\n<p>&copy; 2014, Bosco K. Ho.</p>', 'sort_key': None, 'max_subpages': None, 'template': 'clown.haml', 'sort_reverse': True, 'date': datetime.datetime(2014, 2, 24, 0, 0), 'slug': u'sample5'}]